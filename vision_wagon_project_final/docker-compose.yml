version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres_vision_wagon
    environment:
      POSTGRES_DB: vision_wagon
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d vision_wagon"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_vision_wagon
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_vision_wagon
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Vision Wagon Core
  vision_wagon:
    build:
      context: ./vision_wagon
      dockerfile: Dockerfile
    container_name: vision_wagon
    environment:
      DATABASE_URL: postgresql://admin:password123@postgres:5432/vision_wagon
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672/
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Nómada Alpha API
  nomada_alpha_api:
    build:
      context: ./clients/nomada_alpha/api
      dockerfile: Dockerfile
    container_name: nomada_alpha_api
    environment:
      VISION_WAGON_URL: http://vision_wagon:8000
      DATABASE_URL: postgresql://admin:password123@postgres:5432/vision_wagon
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672/
    ports:
      - "8080:8080"
    depends_on:
      - vision_wagon
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped

  # Nómada Alpha Dashboard
  nomada_alpha_dashboard:
    build:
      context: ./clients/nomada_alpha/dashboard
      dockerfile: Dockerfile
    container_name: nomada_alpha_dashboard
    environment:
      VITE_API_URL: http://localhost:8080
      VITE_VISION_WAGON_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - nomada_alpha_api
      - vision_wagon
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./infra/nginx # Construye la imagen desde la carpeta de nginx
      dockerfile: Dockerfile
    container_name: nginx_vision_wagon
    ports:
      - "80:80"
    depends_on:
      - nomada_alpha_dashboard
      - nomada_alpha_api
      - vision_wagon
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    build:
      context: ./infra/prometheus # Construye la imagen desde la carpeta de prometheus
      dockerfile: Dockerfile
    container_name: prometheus_vision_wagon
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_vision_wagon
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:
